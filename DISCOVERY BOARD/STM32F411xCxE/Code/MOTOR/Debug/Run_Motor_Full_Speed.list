
Run_Motor_Full_Speed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000274  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800040c  08000414  00001414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800040c  0800040c  00001414  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800040c  0800040c  00001414  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800040c  08000414  00001414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800040c  0800040c  0000140c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000410  08000410  00001410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000414  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000414  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000429  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000177  00000000  00000000  0000186d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  000019e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004b  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dc96  00000000  00000000  00001aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000676  00000000  00000000  0000f739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004feac  00000000  00000000  0000fdaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005fc5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000108  00000000  00000000  0005fca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0005fda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003f4 	.word	0x080003f4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003f4 	.word	0x080003f4

080001d8 <main>:
void Run_Forward(void);
void Run_Backward(void);
void Set_Speed(uint8_t duty_cycle); // 0 - 100
void Delay(volatile uint32_t time);

int main(void) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
    GPIO_Init();
 80001de:	f000 f83b 	bl	8000258 <GPIO_Init>

    while (1) {
        Run_Forward();
 80001e2:	f000 f857 	bl	8000294 <Run_Forward>
        for (int speed = 0; speed <= 100; speed += 20) {
 80001e6:	2300      	movs	r3, #0
 80001e8:	60fb      	str	r3, [r7, #12]
 80001ea:	e013      	b.n	8000214 <main+0x3c>
            for (int i = 0; i < 200; i++) // repeat PWM cycle
 80001ec:	2300      	movs	r3, #0
 80001ee:	60bb      	str	r3, [r7, #8]
 80001f0:	e007      	b.n	8000202 <main+0x2a>
                Set_Speed(speed);
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	b2db      	uxtb	r3, r3
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 f870 	bl	80002dc <Set_Speed>
            for (int i = 0; i < 200; i++) // repeat PWM cycle
 80001fc:	68bb      	ldr	r3, [r7, #8]
 80001fe:	3301      	adds	r3, #1
 8000200:	60bb      	str	r3, [r7, #8]
 8000202:	68bb      	ldr	r3, [r7, #8]
 8000204:	2bc7      	cmp	r3, #199	@ 0xc7
 8000206:	ddf4      	ble.n	80001f2 <main+0x1a>
            Delay(500000);
 8000208:	4812      	ldr	r0, [pc, #72]	@ (8000254 <main+0x7c>)
 800020a:	f000 f893 	bl	8000334 <Delay>
        for (int speed = 0; speed <= 100; speed += 20) {
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	3314      	adds	r3, #20
 8000212:	60fb      	str	r3, [r7, #12]
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	2b64      	cmp	r3, #100	@ 0x64
 8000218:	dde8      	ble.n	80001ec <main+0x14>
        }

        Run_Backward();
 800021a:	f000 f84d 	bl	80002b8 <Run_Backward>
        for (int speed = 100; speed >= 0; speed -= 20) {
 800021e:	2364      	movs	r3, #100	@ 0x64
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	e013      	b.n	800024c <main+0x74>
            for (int i = 0; i < 200; i++)
 8000224:	2300      	movs	r3, #0
 8000226:	603b      	str	r3, [r7, #0]
 8000228:	e007      	b.n	800023a <main+0x62>
                Set_Speed(speed);
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	b2db      	uxtb	r3, r3
 800022e:	4618      	mov	r0, r3
 8000230:	f000 f854 	bl	80002dc <Set_Speed>
            for (int i = 0; i < 200; i++)
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	3301      	adds	r3, #1
 8000238:	603b      	str	r3, [r7, #0]
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	2bc7      	cmp	r3, #199	@ 0xc7
 800023e:	ddf4      	ble.n	800022a <main+0x52>
            Delay(500000);
 8000240:	4804      	ldr	r0, [pc, #16]	@ (8000254 <main+0x7c>)
 8000242:	f000 f877 	bl	8000334 <Delay>
        for (int speed = 100; speed >= 0; speed -= 20) {
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	3b14      	subs	r3, #20
 800024a:	607b      	str	r3, [r7, #4]
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2b00      	cmp	r3, #0
 8000250:	dae8      	bge.n	8000224 <main+0x4c>
        Run_Forward();
 8000252:	e7c6      	b.n	80001e2 <main+0xa>
 8000254:	0007a120 	.word	0x0007a120

08000258 <GPIO_Init>:
        }
    }
}

void GPIO_Init(void) {
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= GPIODEN;
 800025c:	4b0b      	ldr	r3, [pc, #44]	@ (800028c <GPIO_Init+0x34>)
 800025e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000260:	4a0a      	ldr	r2, [pc, #40]	@ (800028c <GPIO_Init+0x34>)
 8000262:	f043 0308 	orr.w	r3, r3, #8
 8000266:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PD12, PD13, PD15 as output
    GPIOD->MODER |= (1<<24) | (1<<26) | (1<<30);
 8000268:	4b09      	ldr	r3, [pc, #36]	@ (8000290 <GPIO_Init+0x38>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a08      	ldr	r2, [pc, #32]	@ (8000290 <GPIO_Init+0x38>)
 800026e:	f043 438a 	orr.w	r3, r3, #1157627904	@ 0x45000000
 8000272:	6013      	str	r3, [r2, #0]
    GPIOD->MODER &= ~((1<<25) | (1<<27) | (1<<31));
 8000274:	4b06      	ldr	r3, [pc, #24]	@ (8000290 <GPIO_Init+0x38>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a05      	ldr	r2, [pc, #20]	@ (8000290 <GPIO_Init+0x38>)
 800027a:	f023 430a 	bic.w	r3, r3, #2315255808	@ 0x8a000000
 800027e:	6013      	str	r3, [r2, #0]
}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	40023800 	.word	0x40023800
 8000290:	40020c00 	.word	0x40020c00

08000294 <Run_Forward>:

void Run_Forward(void) {
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
    GPIOD->BSRR = IN_1;       // Set IN1
 8000298:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <Run_Forward+0x20>)
 800029a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800029e:	619a      	str	r2, [r3, #24]
    GPIOD->BSRR = (1<<31);    // Reset IN2
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <Run_Forward+0x20>)
 80002a2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80002a6:	619a      	str	r2, [r3, #24]
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40020c00 	.word	0x40020c00

080002b8 <Run_Backward>:

void Run_Backward(void) {
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
    GPIOD->BSRR = IN_2;       // Set IN2
 80002bc:	4b06      	ldr	r3, [pc, #24]	@ (80002d8 <Run_Backward+0x20>)
 80002be:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80002c2:	619a      	str	r2, [r3, #24]
    GPIOD->BSRR = (1<<29);    // Reset IN1
 80002c4:	4b04      	ldr	r3, [pc, #16]	@ (80002d8 <Run_Backward+0x20>)
 80002c6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80002ca:	619a      	str	r2, [r3, #24]
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40020c00 	.word	0x40020c00

080002dc <Set_Speed>:

void Set_Speed(uint8_t duty_cycle) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
    if (duty_cycle > 100) duty_cycle = 100;
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	2b64      	cmp	r3, #100	@ 0x64
 80002ea:	d901      	bls.n	80002f0 <Set_Speed+0x14>
 80002ec:	2364      	movs	r3, #100	@ 0x64
 80002ee:	71fb      	strb	r3, [r7, #7]

    uint32_t on_time = duty_cycle * 10;
 80002f0:	79fa      	ldrb	r2, [r7, #7]
 80002f2:	4613      	mov	r3, r2
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	4413      	add	r3, r2
 80002f8:	005b      	lsls	r3, r3, #1
 80002fa:	60fb      	str	r3, [r7, #12]
    uint32_t off_time = (100 - duty_cycle) * 10;
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
 8000302:	4613      	mov	r3, r2
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	4413      	add	r3, r2
 8000308:	005b      	lsls	r3, r3, #1
 800030a:	60bb      	str	r3, [r7, #8]

    GPIOD->BSRR = Motor_EN_1;   // Motor ON
 800030c:	4b08      	ldr	r3, [pc, #32]	@ (8000330 <Set_Speed+0x54>)
 800030e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000312:	619a      	str	r2, [r3, #24]
    Delay(on_time);
 8000314:	68f8      	ldr	r0, [r7, #12]
 8000316:	f000 f80d 	bl	8000334 <Delay>
    GPIOD->BSRR = (1<<28);      // Motor OFF
 800031a:	4b05      	ldr	r3, [pc, #20]	@ (8000330 <Set_Speed+0x54>)
 800031c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000320:	619a      	str	r2, [r3, #24]
    Delay(off_time);
 8000322:	68b8      	ldr	r0, [r7, #8]
 8000324:	f000 f806 	bl	8000334 <Delay>
}
 8000328:	bf00      	nop
 800032a:	3710      	adds	r7, #16
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40020c00 	.word	0x40020c00

08000334 <Delay>:

void Delay(volatile uint32_t time) {
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
    while (time--);
 800033c:	bf00      	nop
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	1e5a      	subs	r2, r3, #1
 8000342:	607a      	str	r2, [r7, #4]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d1fa      	bne.n	800033e <Delay+0xa>
}
 8000348:	bf00      	nop
 800034a:	bf00      	nop
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
	...

08000358 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000358:	480d      	ldr	r0, [pc, #52]	@ (8000390 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800035c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000360:	480c      	ldr	r0, [pc, #48]	@ (8000394 <LoopForever+0x6>)
  ldr r1, =_edata
 8000362:	490d      	ldr	r1, [pc, #52]	@ (8000398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000364:	4a0d      	ldr	r2, [pc, #52]	@ (800039c <LoopForever+0xe>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000368:	e002      	b.n	8000370 <LoopCopyDataInit>

0800036a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800036c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036e:	3304      	adds	r3, #4

08000370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000374:	d3f9      	bcc.n	800036a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000376:	4a0a      	ldr	r2, [pc, #40]	@ (80003a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000378:	4c0a      	ldr	r4, [pc, #40]	@ (80003a4 <LoopForever+0x16>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800037c:	e001      	b.n	8000382 <LoopFillZerobss>

0800037e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000380:	3204      	adds	r2, #4

08000382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000384:	d3fb      	bcc.n	800037e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000386:	f000 f811 	bl	80003ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038a:	f7ff ff25 	bl	80001d8 <main>

0800038e <LoopForever>:

LoopForever:
  b LoopForever
 800038e:	e7fe      	b.n	800038e <LoopForever>
  ldr   r0, =_estack
 8000390:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000398:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800039c:	08000414 	.word	0x08000414
  ldr r2, =_sbss
 80003a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a4:	2000001c 	.word	0x2000001c

080003a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a8:	e7fe      	b.n	80003a8 <ADC_IRQHandler>
	...

080003ac <__libc_init_array>:
 80003ac:	b570      	push	{r4, r5, r6, lr}
 80003ae:	4d0d      	ldr	r5, [pc, #52]	@ (80003e4 <__libc_init_array+0x38>)
 80003b0:	4c0d      	ldr	r4, [pc, #52]	@ (80003e8 <__libc_init_array+0x3c>)
 80003b2:	1b64      	subs	r4, r4, r5
 80003b4:	10a4      	asrs	r4, r4, #2
 80003b6:	2600      	movs	r6, #0
 80003b8:	42a6      	cmp	r6, r4
 80003ba:	d109      	bne.n	80003d0 <__libc_init_array+0x24>
 80003bc:	4d0b      	ldr	r5, [pc, #44]	@ (80003ec <__libc_init_array+0x40>)
 80003be:	4c0c      	ldr	r4, [pc, #48]	@ (80003f0 <__libc_init_array+0x44>)
 80003c0:	f000 f818 	bl	80003f4 <_init>
 80003c4:	1b64      	subs	r4, r4, r5
 80003c6:	10a4      	asrs	r4, r4, #2
 80003c8:	2600      	movs	r6, #0
 80003ca:	42a6      	cmp	r6, r4
 80003cc:	d105      	bne.n	80003da <__libc_init_array+0x2e>
 80003ce:	bd70      	pop	{r4, r5, r6, pc}
 80003d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d4:	4798      	blx	r3
 80003d6:	3601      	adds	r6, #1
 80003d8:	e7ee      	b.n	80003b8 <__libc_init_array+0xc>
 80003da:	f855 3b04 	ldr.w	r3, [r5], #4
 80003de:	4798      	blx	r3
 80003e0:	3601      	adds	r6, #1
 80003e2:	e7f2      	b.n	80003ca <__libc_init_array+0x1e>
 80003e4:	0800040c 	.word	0x0800040c
 80003e8:	0800040c 	.word	0x0800040c
 80003ec:	0800040c 	.word	0x0800040c
 80003f0:	08000410 	.word	0x08000410

080003f4 <_init>:
 80003f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f6:	bf00      	nop
 80003f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fa:	bc08      	pop	{r3}
 80003fc:	469e      	mov	lr, r3
 80003fe:	4770      	bx	lr

08000400 <_fini>:
 8000400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000402:	bf00      	nop
 8000404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000406:	bc08      	pop	{r3}
 8000408:	469e      	mov	lr, r3
 800040a:	4770      	bx	lr
